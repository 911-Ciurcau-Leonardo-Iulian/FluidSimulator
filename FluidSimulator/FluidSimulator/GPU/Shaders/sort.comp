#version 430 core
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Entry
{
	uint originalIndex;
	uint hash;
	uint key;
};

layout(std430, binding = 0) buffer Entries {
    uint originalIndex;
    uint hash;
    uint key;
};

//uint numEntries;
//uint groupWidth;
//uint groupHeight;
//uint stepIndex;

// Sort the given entries by their keys (smallest to largest)
// This is done using bitonic merge sort, and takes multiple iterations
void main()
{
    uvec3 id = gl_GlobalInvocationID;
	uint i = id.x;

	uint hIndex = i & (groupWidth - 1);
	uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
	uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
	uint indexRight = indexLeft + rightStepSize;

	// Exit if out of bounds (for non-power of 2 input sizes)
	if (indexRight >= numEntries) return;

	uint valueLeft = Entries[indexLeft].key;
	uint valueRight = Entries[indexRight].key;

	// Swap entries if value is descending
	if (valueLeft > valueRight)
	{
		Entry temp = Entries[indexLeft];
		Entries[indexLeft] = Entries[indexRight];
		Entries[indexRight] = temp;
	}
}
